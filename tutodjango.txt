##########################################################################
########## PREPARANDO EL ENTORNO PARA DJANGO #############################
##########################################################################

# primero se instala el modulo que permite crear entornos virtuales

pip install virtualenv

# Se crea un virtualenv llamado myvenv. El comando general estará en el formato:

python -m virtualenv myvenv

# Este comando anterior creará un directorio llamado myvenv que un entorno virtual
# Todo lo que queda es iniciarlo ejecutando el siguiente comando:

myvenv\Scripts\activate

# o linux:

source myvenv/bin/activate

# Se sabe que esta activado el virtualenv cuando la linea del prompt cambia asi:
#
# (myvenv) C:
#
# o:
#
# (myvenv) ~/$

# ¡Osea cuando el prefijo (myvenv) aparece!

# Con el virtualenv virtualenv iniciado, puedes instalar Django usando pip.
# En la consola, ejecuta

pip install django==1.8

# Para que se vea mas bonito jejeje (sacado de: http://django-marcador.keimlink.de/en/install_django.html)

pip install pytz django-crispy-forms

##########################################################################
########## CREANDO UN NUEVO PROYECTO CON DJANGO ##########################
##########################################################################

# Estando con el virtualenv activado en la consola debes ejecutar:

django-admin startproject mysite .

# o

django-admin.py startproject mysite .

#################### Cambiando la configuración ##########################

# Abrir el archivo mysite/settings.py con un editor y modificar la linea que dice TIME_ZONE
# según sea necesario,  en mi caso queda

TIME_ZONE = 'America/Bogota'

# Al final del archivo que estaba asi:

STATIC_URL = '/static/'

# Debe quedar asi:

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# esto se hace con el fin de agregar una ruta para los archivos estáticos.


#################### Configurar una base de datos ########################

# Hay una gran variedad de opciones de bases de datos para almacenar los datos de tu sitio.
# Utilizar el que viene por defecto, sqlite3.
#
# Esto ya está configurado en esta parte del archivo mysite/settings.py:

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}

# Para crear una base de datos para un blog, ejecurar lo siguiente en la consola:

python manage.py migrate

#(necesario estar en el directorio que contiene el archivo manage.py).

# Si eso va bien, deberías ver algo así:

# python manage.py migrate

# Operations to perform:
#   Apply all migrations: admin, contenttypes, auth, sessions
# Running migrations:
#   Applying contenttypes.0001_initial... OK
#   Applying auth.0001_initial... OK
#   Applying admin.0001_initial... OK
#   Applying sessions.0001_initial... OK
#
# ¡Y listo! ¡Es hora de iniciar el servidor web y ver si el sitio web está funcionando!
#
# Debe estar en el directorio que contiene el archivo manage.py
#
# En la consola, iniciar el servidor web ejecutando

python manage.py runserver

# y acceder a:
#
# http://127.0.0.1:8000/
#
# Para detenerlo basta con la combinacion de teclas CTRL + c

############ Creando una aplicación #############

# En este tutorial se creo un blog el cual tiene posts que a su vez se compone de:
#
# Post
# --------
# title
# text
# author
# created_date
# published_date
#
# Se crea entonces la aplicación blog dentro del proyecto con la siguiente instrucción:
#
python manage.py startapp blog
#
# Después de crear una aplicación también hay que decirle a Django que debe utilizarla.
# Se hace en el archivo mysite/settings.py.
# Encontrar INSTALLED_APPS y añadir una línea que contenga 'blog', justo por encima de ).
# El producto final debe tener este aspecto:

    INSTALLED_APPS = (
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'blog',
    )

### Creando el modelo Post


Vamos abrir blog/models.py, quitamos todo y escribimos un código como este:

from django.db import models
from django.utils import timezone

class Post(models.Model):
	author = models.ForeignKey('auth.User')
	title = models.CharField(max_length=200)
	text = models.TextField()
	created_date = models.DateTimeField(
			default=timezone.now)
	published_date = models.DateTimeField(
			blank=True, null=True)

	def publish(self):
		self.published_date = timezone.now()
		self.save()

	def __str__(self):
		return self.title

# Ahora definir las propiedades del modelo Post:
# title, text, created_date, published_date y author
#
# models.CharField - así es como defines un texto con un número limitado de caracteres.
# models.TextField - esto es para textos largos sin un límite. Será ideal para el contenido de un post, ¿verdad?
# models.DateTimeField - esto es fecha y hora.
# modelos.ForeignKey - este es un vínculo con otro modelo.

######## Crear tablas para los modelos en tu base de datos

# El último paso es añadir nuestro nuevo modelo a nuestra base de datos.
# Primero tenemos que hacer que Django sepa que tenemos algunos cambios en nuestro modelo
# (acabamos de crearlo), escribe

python manage.py makemigrations blog

# Se verá así:
#
# (myvenv) ~/djangogirls$ python manage.py makemigrations blog
# Migrations for 'blog':
#   0001_initial.py:
#   - Create model Post
#
# Django preparará un archivo de migración que tenemos que aplicar
# ahora a nuestra base de datos escribiendo

python manage.py migrate blog

# El resultado debe ser:
#
# (myvenv) ~/djangogirls$ python manage.py migrate blog
# Operations to perform:
#   Apply all migrations: blog
# Running migrations:
#   Applying blog.0001_initial... OK
#
# Para agregar, editar y borrar los posts que hemos modelado, utilizaremos el administrador de Django.
#
# Vamos a abrir el archivo blog/admin.py y reemplazar su contenido con esto:

from django.contrib import admin
from .models import Post

admin.site.register(Post)

# Luego de guardar se inicia el servidor y visitamos la dirección:
#
# http://127.0.0.1:8000/admin/
#
# En esta pagina aparece el Django administration solicitando:
#
# Username:
# Password:
#
# Pero como aun no se ha definido ningún usuario es necesario hacerlo primer,
# por que para poder ingresar es necesario crear un superusuario que es
# un usuario que tiene control sobre todo lo que hay en el sitio.
#
# Para esto se usan las siguientes ordenes:
#
# python manage.py createsuperuser
# Username: admin
# Email address: admin@admin.com
# Password:
# Password (again):
# Superuser created successfully.
